import discord
from discord.ext import commands
import json
import os
from datetime import datetime

LOG_CONFIG_FILE = 'log_config.json'

def load_log_config():
    if not os.path.exists(LOG_CONFIG_FILE):
        return {"log_guilds": [], "target_user_id": None}
    with open(LOG_CONFIG_FILE, 'r') as f:
        return json.load(f)

def save_log_config(config):
    with open(LOG_CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=4)

class Logger(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.config = load_log_config()

    def is_logging_enabled(self, guild: discord.Guild):
        return guild and guild.id in self.config.get("log_guilds", [])

    async def send_log(self, guild, content):
        user_id = self.config.get("target_user_id")
        if not user_id:
            return
        user = self.bot.get_user(user_id)
        if not user:
            try:
                user = await self.bot.fetch_user(user_id)
            except:
                return

        prefix = (
            f"[üõ°Ô∏è –°–µ—Ä–≤–µ—Ä: {guild.name}]\n" if guild else "[üì¨ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É]\n"
        )
        prefix += f"[üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]\n"
        try:
            await user.send(prefix + content)
        except discord.Forbidden:
            pass

    # ========== –°–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ==========
    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author.bot:
            return

        # üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–°
        if message.guild is None:
            content = (
                f"[üì© –õ–°]\n"
                f"[üë§ {message.author}]\n"
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°:\n"
                f"{message.content}"
            )
            await self.send_log(None, content)
            return

        # üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if not self.is_logging_enabled(message.guild):
            return
        if message.type != discord.MessageType.default:
            return
        content = (
            f"[üë§ {message.author}]\n"
            f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤ #{message.channel}:\n"
            f"{message.content}"
        )
        await self.send_log(message.guild, content)

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        if message.author.bot or not self.is_logging_enabled(message.guild):
            return
        content = (
            f"[üë§ {message.author}]\n"
            f"‚ùå –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ #{message.channel}:\n"
            f"{message.content}"
        )
        await self.send_log(message.guild, content)

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        if before.author.bot or not self.is_logging_enabled(before.guild):
            return
        if before.content == after.content:
            return
        content = (
            f"[üë§ {before.author}]\n"
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ #{before.channel}:\n"
            f"–î–æ: {before.content}\n–ü–æ—Å–ª–µ: {after.content}"
        )
        await self.send_log(before.guild, content)

    # ========== –£—á–∞—Å—Ç–Ω–∏–∫–∏ ==========
    @commands.Cog.listener()
    async def on_member_join(self, member):
        if not self.is_logging_enabled(member.guild):
            return
        await self.send_log(member.guild, f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {member}")

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        if not self.is_logging_enabled(member.guild):
            return
        await self.send_log(member.guild, f"‚ûñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä: {member}")

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        if not self.is_logging_enabled(before.guild):
            return
        changes = []
        added = [r for r in after.roles if r not in before.roles]
        removed = [r for r in before.roles if r not in after.roles]
        if added:
            changes.append("üü¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–æ–ª–∏: " + ", ".join(r.name for r in added))
        if removed:
            changes.append("üî¥ –£–¥–∞–ª–µ–Ω—ã —Ä–æ–ª–∏: " + ", ".join(r.name for r in removed))
        if before.nick != after.nick:
            changes.append(f"üìù –ù–∏–∫: {before.nick} ‚Üí {after.nick}")
        if changes:
            await self.send_log(before.guild, f"[üë§ {before}]\n" + "\n".join(changes))

    @commands.Cog.listener()
    async def on_user_update(self, before, after):
        if before.name != after.name:
            content = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –∏–º—è:\n{before} ‚Üí {after}"
            for guild in self.bot.guilds:
                if self.is_logging_enabled(guild):
                    await self.send_log(guild, content)

    # ========== –ì–æ–ª–æ—Å ==========
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        if not self.is_logging_enabled(member.guild):
            return
        if before.channel != after.channel:
            if after.channel and not before.channel:
                action = f"üîä {member} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {after.channel.name}"
            elif before.channel and not after.channel:
                action = f"üîá {member} –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {before.channel.name}"
            else:
                action = f"üîÅ {member} –ø–µ—Ä–µ—à—ë–ª –∏–∑ {before.channel.name} –≤ {after.channel.name}"
            await self.send_log(member.guild, action)

    # ========== –ö–∞–Ω–∞–ª—ã ==========
    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        if self.is_logging_enabled(channel.guild):
            await self.send_log(channel.guild, f"üìÅ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: #{channel.name}")

    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        if self.is_logging_enabled(channel.guild):
            await self.send_log(channel.guild, f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –∫–∞–Ω–∞–ª: #{channel.name}")

    @commands.Cog.listener()
    async def on_guild_channel_update(self, before, after):
        if self.is_logging_enabled(before.guild):
            changes = []
            if before.name != after.name:
                changes.append(f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {before.name} ‚Üí {after.name}")
            if before.overwrites != after.overwrites:
                changes.append("üîê –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
            if changes:
                await self.send_log(before.guild, f"üîß –û–±–Ω–æ–≤–ª—ë–Ω –∫–∞–Ω–∞–ª #{before.name}:\n" + "\n".join(changes))

    # ========== –†–æ–ª–∏ ==========
    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        if self.is_logging_enabled(role.guild):
            await self.send_log(role.guild, f"üéñÔ∏è –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {role.name}")

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        if self.is_logging_enabled(role.guild):
            await self.send_log(role.guild, f"‚ùå –£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å: {role.name}")

    @commands.Cog.listener()
    async def on_guild_role_update(self, before, after):
        if self.is_logging_enabled(before.guild):
            changes = []
            if before.name != after.name:
                changes.append(f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {before.name} ‚Üí {after.name}")
            if before.permissions != after.permissions:
                changes.append("üîê –ò–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
            if changes:
                await self.send_log(before.guild, f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å {before.name}:\n" + "\n".join(changes))

    # ========== –°–∏—Å—Ç–µ–º–Ω—ã–µ ==========
    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        if self.is_logging_enabled(guild):
            await self.send_log(guild, f"üî® –ó–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        if self.is_logging_enabled(guild):
            await self.send_log(guild, f"üéâ –†–∞–∑–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")

    @commands.Cog.listener()
    async def on_guild_update(self, before, after):
        if self.is_logging_enabled(before):
            if before.name != after.name:
                await self.send_log(before, f"üè∑Ô∏è –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {before.name} ‚Üí {after.name}")

    # ========== –†–µ–∞–∫—Ü–∏–∏ ==========
    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        if user.bot or not self.is_logging_enabled(reaction.message.guild):
            return
        await self.send_log(
            reaction.message.guild,
            f"‚ûï {user} –¥–æ–±–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é {reaction.emoji} –≤ #{reaction.message.channel}"
        )

    @commands.Cog.listener()
    async def on_reaction_remove(self, reaction, user):
        if user.bot or not self.is_logging_enabled(reaction.message.guild):
            return
        await self.send_log(
            reaction.message.guild,
            f"‚ûñ {user} —É–±—Ä–∞–ª —Ä–µ–∞–∫—Ü–∏—é {reaction.emoji} –≤ #{reaction.message.channel}"
        )

    # ========== –ö–æ–º–∞–Ω–¥—ã ==========
    @commands.command()
    async def logtarget(self, ctx, member: discord.User):
        self.config["target_user_id"] = member.id
        save_log_config(self.config)
        await ctx.send(f"‚úÖ –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member}.")

    @commands.command()
    async def logserver(self, ctx, action: str, guild_id: int):
        guilds = self.config.get("log_guilds", [])
        if action == "add":
            if guild_id in guilds:
                return await ctx.send("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
            guilds.append(guild_id)
            await ctx.send("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.")
        elif action == "remove":
            if guild_id not in guilds:
                return await ctx.send("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –≤ —Å–ø–∏—Å–∫–µ.")
            guilds.remove(guild_id)
            await ctx.send("‚úÖ –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            return await ctx.send("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π `add` –∏–ª–∏ `remove`.")
        self.config["log_guilds"] = guilds
        save_log_config(self.config)

    @commands.command()
    async def logservers(self, ctx):
        ids = self.config.get("log_guilds", [])
        if not ids:
            return await ctx.send("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        await ctx.send("üìã –°–ø–∏—Å–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n```\n" + "\n".join(map(str, ids)) + "\n```")

    @commands.command(name="help-log")
    async def help_log(self, ctx):
        help_embed = discord.Embed(
            title="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é",
            description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            color=0x00FF00,
            timestamp=datetime.utcnow()
        )
        commands_info = [
            ("logtarget <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>", "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ª–æ–≥–∏ –≤ –õ–°.", "`!logtarget @User`"),
            ("logserver add <guild_id>", "–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.", "`!logserver add 123456789012345678`"),
            ("logserver remove <guild_id>", "–£–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.", "`!logserver remove 123456789012345678`"),
            ("logservers", "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ª–æ–≥–∏.", "`!logservers`"),
        ]
        for name, desc, example in commands_info:
            help_embed.add_field(name=f"!{name}", value=f"{desc}\n–ü—Ä–∏–º–µ—Ä: {example}", inline=False)

        await ctx.send(embed=help_embed)

async def setup(bot):
    await bot.add_cog(Logger(bot))
