import discord
from discord.ext import commands
import json
import os
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

DISCORD_TOKEN = "MTM3NzY5MTQzNzA1OTE0NTkxMA.Ge4OPt.R_250rQ-wTGg9OtNzq5fBjP_K8JSq85kM56JUg"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω


class Kasumi(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.messages = True
        intents.guilds = True
        intents.members = True
        intents.message_content = True

        super().__init__(
            command_prefix='!',
            intents=intents,
            help_command=None
        )

        self.config_file = 'spam_config.json'
        self.config = {}
        self.load_config()

    def get_guild_config(self, guild_id):
        gid = str(guild_id)
        if gid not in self.config:
            self.config[gid] = {
                'target_channel': None,
                'spam_message': "SPAM",
                'spam_delay': 1,
                'mention_role': None,
                'is_spamming': False
            }
        return self.config[gid]

    def load_config(self):
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    self.config = json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            self.config = {}

    def save_config(self):
        try:
            with open(self.config_file, 'w') as f:
                json.dump(self.config, f, indent=4)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    async def on_ready(self):
        logging.info(f'–ë–æ—Ç {self.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
        await self.change_presence(activity=discord.Game(name="!help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"))

    async def on_command_error(self, ctx, error):
        if isinstance(error, commands.CommandNotFound):
            return
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {str(error)}")

    async def load_startup_cogs(self):
        cog_list = self.config.get("startup_cogs", [])
        for cog in cog_list:
            try:
                await self.load_extension(f'cogs.{cog}')
                logging.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω cog: cogs.{cog}')
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cogs.{cog}: {e}')


def setup_commands(bot: Kasumi):
    @bot.command(name='help')
    async def help_command(ctx):
        help_embed = discord.Embed(
            title="üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞",
            description="–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å `!`",
            color=0x00ff00
        )

        commands_info = [
            ("load <name>", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π cog", "!load spamm"),
            ("reload <name>", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å cog", "!reload spamm"),
            ("addcog <name>", "–î–æ–±–∞–≤–∏—Ç—å cog –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É", "!addcog spamm"),
            ("showcogs", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö cog-–æ–≤", "!showcogs"),
            ("removecog <name>", "–£–¥–∞–ª–∏—Ç—å cog –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏", "!removecog spamm")
        ]

        for cmd, desc, example in commands_info:
            help_embed.add_field(
                name=f"!{cmd}",
                value=f"{desc}\n–ü—Ä–∏–º–µ—Ä: `{example}`",
                inline=False
            )

        await ctx.send(embed=help_embed)

    @bot.command()
    async def load(ctx, name: str):
        path = f'cogs/{name}.py'
        if not os.path.isfile(path):
            return await ctx.send(f"‚ùå –§–∞–π–ª `{path}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        try:
            await bot.load_extension(f'cogs.{name}')
            await ctx.send(f"‚úÖ Cog `{name}` –∑–∞–≥—Ä—É–∂–µ–Ω.")
        except commands.ExtensionAlreadyLoaded:
            await ctx.send(f"‚ö†Ô∏è Cog `{name}` —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        except Exception as e:
            await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ `{name}`:\n```{e}```")

    @bot.command()
    async def reload(ctx, name: str):
        try:
            await bot.unload_extension(f'cogs.{name}')
            await bot.load_extension(f'cogs.{name}')
            await ctx.send(f"‚ôªÔ∏è Cog `{name}` –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.")
        except commands.ExtensionNotLoaded:
            await ctx.send(f"‚ö†Ô∏è Cog `{name}` –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ.")
        except Exception as e:
            await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ `{name}`:\n```{e}```")

    @bot.command()
    async def addcog(ctx, name: str):
        cogs = bot.config.get("startup_cogs", [])
        if name in cogs:
            return await ctx.send(f"‚ö†Ô∏è Cog `{name}` —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.")

        cogs.append(name)
        bot.config["startup_cogs"] = cogs
        bot.save_config()
        await ctx.send(f"‚úÖ Cog `{name}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É.\n–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è:\n```{', '.join(cogs)}```")

    @bot.command()
    async def showcogs(ctx):
        cogs = bot.config.get("startup_cogs", [])
        if not cogs:
            await ctx.send("‚ùå –°—Ç–∞—Ä—Ç–æ–≤—ã–µ cog-–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        else:
            await ctx.send(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ cog-–∏:\n```{', '.join(cogs)}```")

    @bot.command()
    async def removecog(ctx, name: str):
        cogs = bot.config.get("startup_cogs", [])
        if name not in cogs:
            return await ctx.send(f"‚ö†Ô∏è Cog `{name}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.")

        cogs.remove(name)
        bot.config["startup_cogs"] = cogs
        bot.save_config()
        await ctx.send(f"üóëÔ∏è Cog `{name}` —É–¥–∞–ª—ë–Ω –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.\n–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è:\n```{', '.join(cogs) or '–Ω–∏—á–µ–≥–æ'}```")


async def start_bot():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot = Kasumi()
    setup_commands(bot)
    await bot.load_startup_cogs()
    await bot.start(DISCORD_TOKEN)


def main():
    asyncio.run(start_bot())


if __name__ == "__main__":
    main()
